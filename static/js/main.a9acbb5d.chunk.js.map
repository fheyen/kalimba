{"version":3,"sources":["lib/ui/View.js","components/KalimbaTab.js","App.js","index.js"],"names":["View","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","onResize","increaseRows","state","rowlimit","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","additionalState","this","ow","oh","PureComponent","PitchTimeChart","updateTab","midi","track","useHtml","letter","midiFileData","notes","text","textArea","value","letterFormat","Lamellophone","convertNumbersToLetters","numberLetterMap","convertTabToNotes","tuning","console","log","tab","innerHTML","convertNotesToHtmlTab","Utils","noteColorFromPitch","innerText","convertNotesToTab","lamellophoneTunings","get","Map","style","gridArea","ref","n","placeholder","onChange","e","target","map","d","i","length","App","Math","floor","window","innerWidth","innerHeight","setTimeSelection","timeSelection","similarSections","addEventListener","source","document","getElementById","_this","MidiParser","parse","obj","parts","preprocessMidiFileData","noteObjs","alert","s","type","id","href","faGithub","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a9acbb5d.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import React from 'react';\nimport View from '../lib/ui/View';\nimport { Lamellophone, Utils } from '../../node_modules/musicvis-lib/dist/musicvislib';\nimport '../style/KalimbaTab.css';\n\n\n\nexport default class PitchTimeChart extends View {\n\n    constructor(props) {\n        const margin = { top: 35, right: 20, bottom: 40, left: 55 };\n        super(props, margin);\n        this.state = {\n            ...this.state,\n            useHtml: true,\n            letter: true,\n            midi: false,\n            track: 0\n        };\n        this.tuning = Lamellophone.lamellophoneTunings.get('Kalimba').get('17 C Major');\n        this.numberLetterMap = new Map([\n            [1, 'C'],\n            [2, 'D'],\n            [3, 'E'],\n            [4, 'F'],\n            [5, 'G'],\n            [6, 'A'],\n            [7, 'B'],\n        ]);\n    }\n\n    componentDidUpdate() {\n        this.updateTab();\n    }\n\n    updateTab = () => {\n        const { midi, track, useHtml, letter } = this.state;\n        const { midiFileData } = this.props;\n\n        let notes = [];\n\n        if (midi) {\n            notes = midiFileData[track];\n        } else {\n            const text = this.textArea.value;\n            const letterFormat = Lamellophone.convertNumbersToLetters(text, this.numberLetterMap);\n            notes = Lamellophone.convertTabToNotes(letterFormat, this.tuning, 120);\n        }\n\n        console.log(notes);\n\n        if (useHtml) {\n            this.tab.innerHTML = Lamellophone.convertNotesToHtmlTab(\n                notes,\n                this.tuning,\n                letter ? 'letter' : 'number',\n                0.1,\n                Utils.noteColorFromPitch\n            );\n        } else {\n            this.tab.innerText = Lamellophone.convertNotesToTab(\n                notes,\n                this.tuning,\n                letter ? 'letter' : 'number',\n                0.1\n            );\n        }\n\n    }\n\n\n    render() {\n        const { viewWidth, viewHeight, midi, useHtml, letter } = this.state;\n        const { midiFileData } = this.props;\n        // HTML\n        return (\n            <div\n                className='View KalimbaTab'\n                style={{ gridArea: `span ${this.state.rowSpan} / span ${this.state.columnSpan}` }}\n            >\n                <textarea\n                    ref={n => this.textArea = n}\n                    style={{\n                        width: viewWidth - 60,\n                        height: viewHeight / 2,\n                    }}\n                    placeholder='Write or paste a kalimba tab in letter notation here'\n                    onChange={this.updateTab}\n                />\n                <div className='control'>\n                    <button onClick={() => this.setState({ midi: !midi })}>\n                        {midi ? 'MIDI' : 'Text'}\n                    </button>\n                    {midi &&\n                        <select onChange={e => this.setState({ track: +e.target.value })}>\n                            {midiFileData.map((d, i) => (\n                                <option\n                                    key={i}\n                                    value={i}\n                                >\n                                    Track {i} ({d.length} notes)\n                                </option>\n                            ))}\n                        </select>\n                    }\n                    <button onClick={() => this.setState({ useHtml: !useHtml })}>\n                        {useHtml ? 'HTML' : 'Text'}\n                    </button>\n                    <button onClick={() => this.setState({ letter: !letter })}>\n                        {letter ? 'Letter' : 'Number'}\n                    </button>\n                </div>\n                <div\n                    className='tab'\n                    ref={n => this.tab = n}\n                    style={{\n                        width: '100%',\n                        height: viewHeight / 2,\n                    }}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './style/App.css';\nimport MidiParser from 'midi-parser-js';\nimport PitchTimeChart from './components/PitchTimeChart';\nimport KalimbaTab from './components/KalimbaTab';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n// import { preprocessMidiFileData } from 'musicvis-lib';\nimport { preprocessMidiFileData } from '../node_modules/musicvis-lib/dist/musicvislib';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewSize: {\n        outerWidth: 800,\n        outerHeight: 600\n      },\n      midiFileData: [],\n      timeSelection: null\n    };\n  }\n\n  componentDidMount() {\n    // Scale layout to current screen size\n    window.addEventListener('resize', this.onResize, false);\n    this.onResize();\n\n    // select the INPUT element that will handle\n    // the file selection.\n    let source = document.getElementById('filereader');\n    // provide the File source and a callback function\n    const _this = this;\n    MidiParser.parse(source, function (obj) {\n      try {\n        const parsed = preprocessMidiFileData(obj);\n        const parts = parsed.parts.map(d => d.noteObjs);\n        _this.setState({ midiFileData: parts });\n      } catch (e) {\n        alert('Invalid MIDI file or wrong format!');\n      }\n    });\n  }\n\n  /**\n   * Updates the size state when the window size changes\n   * so views can react and redraw\n   */\n  onResize = () => {\n    this.setState({\n      viewSize: {\n        outerWidth: Math.floor(window.innerWidth - 20),\n        outerHeight: Math.floor(window.innerHeight - 200)\n      }\n    });\n  }\n\n  /**\n   * Changes the current time selection\n   * @param {number[]} timeSelection [start, end] in seconds\n   */\n  setTimeSelection = (timeSelection) => {\n    this.setState({ timeSelection, similarSections: [] });\n  };\n\n  render() {\n    const s = this.state;\n    return (\n      <div className={`App dark`} >\n        <div className='fileSelection'>\n          <input\n            className='fileInput'\n            type='file'\n            id='filereader'\n          />\n        </div>\n        {/* <PitchTimeChart\n          name='Note-Time Chart'\n          viewSize={s.viewSize}\n          midiFileData={s.midiFileData}\n          timeSelection={s.timeSelection}\n          setTimeSelection={this.setTimeSelection}\n        /> */}\n        <KalimbaTab\n          viewSize={s.viewSize}\n          midiFileData={s.midiFileData}\n        />\n        <div className='githubLink'>\n          <a href='https://github.com/fheyen/midi-pianoroll'>\n            <FontAwesomeIcon icon={faGithub} />&nbsp;\n                        https://github.com/fheyen/midi-pianoroll\n                    </a>\n        </div>\n      </div >\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}