{"version":3,"sources":["lib/ui/View.js","components/KalimbaRoll.js","lib/Player.js","components/KalimbaTab.js","App.js","index.js"],"names":["View","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","onResize","increaseRows","state","rowlimit","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","additionalState","this","ow","oh","PureComponent","KalimbaRoll","componentDidMount","initialize","overviewWidth","svg","select","selectAll","remove","overviewX1","x","scaleLinear","range","xOv","y","yOv","Canvas","setupCanvas","canvas","highlightCanvas","initialized","updateBackground","notes","tuning","domain","keyCount","maxTime","max","d","end","ctx","getContext","clearRect","drawKeys","drawNotes","draw","window","requestAnimationFrame","currentPlayerTime","length","t","limit","ctx2","drawCurrentPlayerTime","pitchPositionMap","pitches","getNotesInInstrumentOrder","keyLengthScale","extent","w","yPos","font","textAlign","pitch","xPos","get","fillStyle","keyHeight","fillRect","note","Midi","getMidiNoteByNr","label","fillText","data","w2","cols","schemeCategory10","startPos","start","endPos","channel","h","Math","drawNoteTrapezoidUpwards","lastData","lastTuning","Map","resizeComponent","pitchOrder","i","set","currentTime","viewLimit","x1","style","gridArea","ref","n","transform","Player","frontendUrl","currentPlayTime","AudioContext","desciption","onTimeChange","cb","onStop","getAvailableInstruments","Array","from","values","setVolume","volume","setLogging","log","isPlaying","isPaused","playNotes","sound","startAt","endAt","speed","stop","has","slice","NoteArray","sortByTime","getDuration","filter","shiftTime","console","toFixed","scaleTime","getNotes","resume","_start","preloadInstrument","then","error","warn","_scheduler","_updateTime","time","current","_playNote","duration","getName","play","e","ctxTime","nextNotetime","shift","setTimeout","callCallback","clearTimeout","pause","pauseOrResume","options","soundfont","gain","Soundfont","instrument","KalimbaTab","showExample","textArea","value","example","input","textInput","midi","midiFileData","track","transpose","letterFormat","Lamellophone","convertNumbersToLetters","numberLetterMap","convertTabToNotes","updateTab","output","useHtml","letter","tab","innerHTML","convertNotesToHtmlTab","Utils","noteColorFromPitch","innerText","convertNotesToTab","parseShareUrl","parsed","param","URLSearchParams","location","search","JSON","parse","copyShareUrl","uri","encodeURI","stringify","href","split","url","navigator","clipboard","writeText","alert","catch","err","playerSpeed","player","undefined","lamellophoneTunings","mounted","sharedNotes","source","document","getElementById","MidiParser","obj","parts","preprocessMidiFileData","map","noteObjs","prevProps","prevState","display","type","id","accept","onChange","target","defaultValue","min","step","placeholder","App","floor","innerWidth","innerHeight","timeSelection","addEventListener","s","faGithub","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.89afcf82.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { schemeCategory10, select, scaleLinear, extent, max } from 'd3';\r\nimport View from '../lib/ui/View';\r\nimport { Midi, Canvas } from 'musicvis-lib';\r\n\r\n\r\nexport default class KalimbaRoll extends View {\r\n\r\n    constructor(props) {\r\n        const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n        super(props, margin);\r\n        this.state = {\r\n            ...this.state,\r\n            overviewWidth: 80,\r\n            // For checking if there are new notes\r\n            lastData: [],\r\n            lastTuning: [],\r\n            notes: [],\r\n            pitchPositionMap: new Map()\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => this.initialize();\r\n\r\n    onResize = () => {\r\n        this.initialize();\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.resizeComponent();\r\n        const { data, tuning } = this.props;\r\n        if (\r\n            data !== this.state.lastData\r\n            || tuning !== this.state.lastTuning\r\n        ) {\r\n            const pitchPositionMap = new Map();\r\n            const pitchOrder = tuning.getNotesInInstrumentOrder();\r\n            for (let i = 0; i < pitchOrder.length; i++) {\r\n                pitchPositionMap.set(pitchOrder[i], i);\r\n            }\r\n            // Update state, cache notes\r\n            this.setState(\r\n                {\r\n                    lastData: data,\r\n                    notes: data,\r\n                    lastTuning: tuning,\r\n                    pitchPositionMap\r\n                },\r\n                this.updateBackground\r\n            );\r\n        }\r\n    }\r\n\r\n    initialize = () => {\r\n        const { width, height, margin, overviewWidth } = this.state;\r\n        const svg = select(this.svg);\r\n        svg.selectAll('*').remove();\r\n        // Scales\r\n        const overviewX1 = margin.left + width - overviewWidth;\r\n        const x = scaleLinear().range([margin.left, overviewX1 - 20]);\r\n        const xOv = scaleLinear().range([overviewX1, overviewX1 + overviewWidth]);\r\n        const y = scaleLinear().range([height * 0.75, 0]);\r\n        const yOv = scaleLinear().range([height, 0]);\r\n        // Setup canvas rescaled to device pixel ratio\r\n        Canvas.setupCanvas(this.canvas);\r\n        Canvas.setupCanvas(this.highlightCanvas);\r\n        this.setState(\r\n            { initialized: true, svg, x, xOv, y, yOv },\r\n            this.updateBackground\r\n        );\r\n    }\r\n\r\n    updateBackground = () => {\r\n        const { viewWidth, viewHeight, x, xOv, yOv, notes } = this.state;\r\n        const { tuning } = this.props;\r\n        // if (!notes || notes.length === 0) { return; }\r\n\r\n        // Set x scale domain\r\n        x.domain([0, tuning.keyCount + 1]);\r\n        xOv.domain([0, tuning.keyCount]);\r\n        // Set y scale domain\r\n        const maxTime = +max(notes, d => d.end);\r\n        yOv.domain([0, maxTime]);\r\n\r\n        // Draw background (only changes on new data or resize)\r\n        const ctx = this.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, viewWidth, viewHeight);\r\n        // Draw piano keys in background\r\n        this.drawKeys(ctx, tuning);\r\n        // Draw overview notes\r\n        this.drawNotes(ctx, notes, xOv, yOv);\r\n\r\n        this.draw();\r\n    }\r\n\r\n    /**\r\n     * Main draw function, sets scale domains and controls drawing of each\r\n     * component\r\n     */\r\n    draw = () => {\r\n        window.requestAnimationFrame(() => {\r\n            const { viewWidth, viewHeight, rowSpan, margin, x, y, notes } = this.state;\r\n            const { currentPlayerTime } = this.props;\r\n            if (!notes || notes.length === 0) { return; }\r\n\r\n            // Update y scale for currentPlayerTime\r\n            const t = currentPlayerTime !== null ? currentPlayerTime : 0;\r\n            const limit = t + 2 * rowSpan;\r\n            y.domain([t, limit]);\r\n\r\n            // Draw foreground (changes all the time)\r\n            const ctx2 = this.highlightCanvas.getContext('2d');\r\n            ctx2.clearRect(0, 0, viewWidth, viewHeight);\r\n            // Draw notes onto canvas\r\n            this.drawNotes(ctx2, notes, x, y);\r\n            // Draw current player time\r\n            this.drawCurrentPlayerTime(ctx2, t, limit);\r\n            ctx2.clearRect(0, 0, viewWidth, margin.top);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draws horizontal bands with alternating color to better distinguish rows.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     */\r\n    drawKeys = (ctx, tuning) => {\r\n        const { height, margin, x, pitchPositionMap } = this.state;\r\n        const pitches = tuning.getNotesInInstrumentOrder();\r\n        const keyLengthScale = scaleLinear()\r\n            .domain(extent(tuning.pitches))\r\n            .range([height / 4, height / 8]);\r\n        const w = x(1) - x(0) - 4;\r\n        const yPos = margin.top + height * 0.75;\r\n        ctx.font = '16px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        for (const pitch of pitches) {\r\n            const xPos = x(pitchPositionMap.get(pitch));\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            const keyHeight = keyLengthScale(pitch);\r\n            ctx.fillRect(xPos + 2, yPos, w, keyHeight);\r\n            const note = Midi.getMidiNoteByNr(pitch);\r\n            ctx.fillStyle = 'black';\r\n            const label = pitch % 12 === 0 ? note.label : note.name;\r\n            ctx.fillText(label, xPos + w / 2 + 2, yPos + keyHeight - 10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the note retangles.\r\n     * @param {CanvasRenderingContext2D} ctx canvas rendering context\r\n     * @param {Notes[]} data notes with start, end, pitch\r\n     * @param {number} boxHeight height of each pitch-line\r\n     * @param {Function} x D3 linearScale x scale\r\n     * @param {Function} y D3 linearScale y scale\r\n     */\r\n    drawNotes = (ctx, data, x, y) => {\r\n        const { height, margin, pitchPositionMap } = this.state;\r\n        const { currentPlayerTime } = this.props;\r\n        const w = x(1) - x(0);\r\n        const w2 = w / 2;\r\n        // Colorize by channel\r\n        const cols = schemeCategory10;\r\n        for (let note of data) {\r\n            const startPos = y(note.start);\r\n            const endPos = y(note.end);\r\n            // Do not draw invisible notes\r\n            if (startPos < 0 || endPos > height) {\r\n                continue;\r\n            }\r\n            ctx.fillStyle = note.start >= currentPlayerTime ? cols[note.channel % cols.length] : 'gray';\r\n            const yPos = margin.top + endPos;\r\n            const h = Math.max(startPos - endPos, 1);\r\n            const xPos = x(pitchPositionMap.get(note.pitch));\r\n            Canvas.drawNoteTrapezoidUpwards(ctx, xPos, yPos, w, h, w2);\r\n            // Canvas.drawRoundedRect(ctx, xPos, yPos, w, h, radius);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the current player time in the overview.\r\n     */\r\n    drawCurrentPlayerTime(ctx, currentTime, viewLimit) {\r\n        const { margin, overviewWidth, xOv, yOv } = this.state;\r\n        ctx.fillStyle = 'rgba(70, 130, 180, 0.4)';\r\n        const yPos = yOv(viewLimit);\r\n        const h = yOv(currentTime) - yPos;\r\n        const [x1] = xOv.range();\r\n        ctx.fillRect(x1, margin.top + yPos, overviewWidth, h);\r\n    }\r\n\r\n    render() {\r\n        const { viewWidth, viewHeight, margin } = this.state;\r\n        // Only draw data after chart has been initialized\r\n        if (this.canvas && this.state.initialized) {\r\n            this.draw();\r\n        }\r\n        // HTML\r\n        return (\r\n            <div\r\n                className='View KalimbaRoll'\r\n                style={{ gridArea: `span ${this.state.rowSpan} / span ${this.state.columnSpan}` }}\r\n            >\r\n                <canvas\r\n                    className='ViewCanvas'\r\n                    ref={n => this.canvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                />\r\n                <canvas\r\n                    className='ViewCanvas HighlightCanvas'\r\n                    ref={n => this.highlightCanvas = n}\r\n                    style={{ width: viewWidth, height: viewHeight }}\r\n                />\r\n                <svg\r\n                    width={viewWidth}\r\n                    height={viewHeight}\r\n                >\r\n                    <g\r\n                        ref={n => this.svg = n}\r\n                        transform={`translate(${margin.left}, ${margin.top})`}\r\n                    />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Soundfont from 'soundfont-player';\r\nimport { NoteArray } from 'musicvis-lib';\r\n\r\n/**\r\n * Note player that uses a synthesizer of samples based on sound arguments.\r\n */\r\nexport default class Player {\r\n\r\n    #frontendUrl = null;\r\n    // Callbakcs\r\n    #playerTimeCallback = null;\r\n    #onStopCallback = null;\r\n    // Settings\r\n    #sound = null;\r\n    #volume = 1;\r\n    #speed = null;\r\n    #log = false;\r\n    // Internal state\r\n    currentPlayTime = null;\r\n    #instrument = null;\r\n    #audioCtx = new AudioContext();\r\n    #timerID = null;\r\n    #startTimeStamp = null;\r\n    #startAt = 0;\r\n    #endAt = -1;\r\n    #notes = [];\r\n    #notesLeftToPlay = [];\r\n    #songDuration = null;\r\n    #isPlaying = false;\r\n    #isPaused = false;\r\n    // Cache info\r\n    #lastSoundName = null;\r\n    // Valid instrument / sound names\r\n    // For soundfont instruments see: https://github.com/danigb/soundfont-player/blob/master/INSTRUMENTS.md\r\n    #validInstruments = new Map([\r\n        ['acoustic_grand_piano', { name: 'acoustic_grand_piano', desciption: 'Acoustic grand piano' }],\r\n        ['acoustic_guitar_nylon', { name: 'acoustic_guitar_nylon', desciption: 'Acoustic guitar nylon' }],\r\n        ['acoustic_guitar_steel', { name: 'acoustic_guitar_steel', desciption: 'Acoustic guitar steel' }],\r\n        ['distortion_guitar', { name: 'distortion_guitar', desciption: 'Distortion guitar' }],\r\n        ['electric_bass_finger', { name: 'electric_bass_finger', desciption: 'Electric bass finger' }],\r\n        ['electric_bass_pick', { name: 'electric_bass_pick', desciption: 'Electric bass pick' }],\r\n        ['electric_guitar_clean', { name: 'electric_guitar_clean', desciption: 'Electric guitar clean' }],\r\n        ['electric_guitar_muted', { name: 'electric_guitar_muted', desciption: 'Electric guitar muted' }],\r\n        ['overdriven_guitar', { name: 'overdriven_guitar', desciption: 'Overdriven guitar' }],\r\n        ['kalimba', { name: 'kalimba', desciption: 'Kalimba' }],\r\n        ['percussion', { name: 'percussion', desciption: 'Percussion', font: 'FluidR3_GM' }]\r\n    ]);\r\n\r\n    /**\r\n     * Player for synthesized or sampled playback of an array of Note objects.\r\n     * @param {string} frontendUrl URL of the frontend, needed to find the\r\n     *      soundfont and sample files\r\n     */\r\n    constructor(frontendUrl) {\r\n        this.#frontendUrl = frontendUrl;\r\n    }\r\n\r\n    /**\r\n     * Register a callback for player time change\r\n     * @param {Function} cb callback function, argument is the current player\r\n     *      time in seconds\r\n     * @returns {Player} itself\r\n     */\r\n    onTimeChange = (cb) => {\r\n        this.#playerTimeCallback = cb;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register a callback for player stop\r\n     * @param {Function} cb callback function, no arguments\r\n     * @returns {Player} itself\r\n     */\r\n    onStop = (cb) => {\r\n        this.#onStopCallback = cb;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns an array with the supported instrument soundfont names\r\n     * @returns {Object[]} {name, description, font}\r\n     */\r\n    getAvailableInstruments = () => {\r\n        return Array.from(this.#validInstruments.values());\r\n    }\r\n\r\n    /**\r\n     * Changes the volume (loudness)\r\n     * @param {number} volume volume in [0, 1]\r\n     * @returns {Player} itself\r\n     */\r\n    setVolume = (volume) => {\r\n        this.#volume = volume;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Changes the logging flag to enable or disable logging of note events.\r\n     * @param {boolean} log\r\n     */\r\n    setLogging = (log) => {\r\n        this.#log = log;\r\n        return this;\r\n    }\r\n\r\n    isPlaying = () => this.#isPlaying;\r\n\r\n    isPaused = () => this.#isPaused;\r\n\r\n    /**\r\n     * Plays a set of notes.\r\n     * TODO: filter notes before playing to sort out invalid ones.\r\n     * @param {Note[]} notes array of note objects\r\n     * @param {string} sound see https://github.com/keithwhor/audiosynth\r\n     * @param {number} startAt time of the track where to start playing in seconds\r\n     * @param {number} endAt time of the track where to end playing in seconds\r\n     *      or -1 for no end limit\r\n     * @param {number} speed relative speed in [0, 2] (e.g. 0.5 for halfed speed)\r\n     */\r\n    playNotes = (notes, sound = 'piano', startAt = 0, endAt = -1, speed = 1) => {\r\n        // Stop if playing\r\n        if (this.#isPlaying && !this.#isPaused) {\r\n            this.stop();\r\n        }\r\n        // Check arguments\r\n        if (!notes || notes.length === 0) {\r\n            console.warn('[PLAYER] Was called with no data');\r\n            return;\r\n        }\r\n        if (!this.#validInstruments.has(sound)) {\r\n            console.error(`[Player] Sound ${sound} is not supported!`);\r\n            return;\r\n        }\r\n        // Remember original notes for resume\r\n        this.#notes = notes.slice();\r\n        notes = new NoteArray(notes).sortByTime();\r\n        this.#songDuration = notes.getDuration();\r\n        // Start time\r\n        if (startAt > 0) {\r\n            notes = notes.filter(d => d.start >= startAt).shiftTime(-startAt);\r\n            console.log(`[Player] Will start at ${startAt.toFixed(2)} seconds with ${notes.length()} notes left`);\r\n        }\r\n        // Consider playback speed\r\n        if (speed !== 1 && speed > 0) {\r\n            notes = notes.scaleTime(1 / speed);\r\n            this.#songDuration /= speed;\r\n        }\r\n        notes = notes.getNotes();\r\n        // Start playing\r\n        console.log(`[Player] Playing ${notes.length} notes with '${sound}', speed ${speed}, and volume ${this.#volume}`);\r\n        if (this.#audioCtx.state === 'suspended') {\r\n            this.#audioCtx.resume();\r\n        }\r\n        this.#sound = sound;\r\n        this.#startAt = startAt;\r\n        this.#endAt = endAt;\r\n        this.#speed = speed;\r\n        this.#notesLeftToPlay = notes.slice();\r\n        if (sound === this.#lastSoundName) {\r\n            // Re-use instrument\r\n            this._start();\r\n        } else {\r\n            // Load instrument\r\n            this.preloadInstrument(sound).then(this._start);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an instrument (soundfont) in advance so the player can start\r\n     * immediately once it is called\r\n     * @param {string} sound instrument name\r\n     */\r\n    async preloadInstrument(sound) {\r\n        // TODO: Had to change it since react somehow redirects everything to /\r\n        // when fetching the file..., using GitHub hosted files now\r\n        // TODO: fix it with this? https://create-react-app.dev/docs/using-the-public-folder\r\n        // const url = this.#frontendUrl;\r\n        // const file = `soundfonts/${sound}-mp3.js`;\r\n        // console.log(`[Player] Pre-loading sound font from ${url}/${file}`);\r\n        if (!this.#validInstruments.has(sound)) {\r\n            console.warn(`[Player] Invalid sound ${sound}`);\r\n        }\r\n        console.log(`[Player] Loading soundfont ${sound}`);\r\n        const options = {\r\n            // from: url,\r\n            soundfont: this.#validInstruments.get(sound).font || 'FluidR3_GM',\r\n            gain: this.#volume\r\n        };\r\n        const instrument = await Soundfont.instrument(this.#audioCtx, sound, options);\r\n        this.#lastSoundName = sound;\r\n        this.#instrument = instrument;\r\n        console.log(`[Player] Finished loading soundfont ${sound}`);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Start scheduler\r\n     */\r\n    _start = () => {\r\n        console.log('[Player] Starting');\r\n        this.#isPlaying = true;\r\n        this.#isPaused = false;\r\n        this.#startTimeStamp = this.#audioCtx.currentTime;\r\n        this._scheduler();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Update current time and call callback\r\n     * @param {*} time\r\n     */\r\n    _updateTime = (time) => {\r\n        const current = (time - this.#startTimeStamp) * this.#speed + this.#startAt;\r\n        this.currentPlayTime = current;\r\n        if (this.#playerTimeCallback) {\r\n            this.#playerTimeCallback(current);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Plays a single note\r\n     * @param {Note} note note object\r\n     * @param {number} time time in milliseconds\r\n     */\r\n    _playNote = (note, time) => {\r\n        const duration = note.getDuration();\r\n        if (this.#log) {\r\n            console.log(`[Player] Playing ${note.getName()} for ${duration}s`);\r\n        }\r\n        try {\r\n            this.#instrument.play(note.pitch, time, { duration });\r\n        } catch (e) {\r\n            console.error(`[Player] Error for note`, note, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * Scheduler runs every scheduleTimeout milliseconds to schedule notes\r\n     * for the coming lookahead time in seconds\r\n     */\r\n    _scheduler = () => {\r\n        const lookahead = 0.1;\r\n        const scheduleTimeout = 33;\r\n        const ctxTime = this.#audioCtx.currentTime;\r\n        this._updateTime(ctxTime);\r\n        // Schedule notes\r\n        while (this.#notesLeftToPlay.length > 0) {\r\n            const nextNotetime = this.#startTimeStamp + this.#notesLeftToPlay[0].start;\r\n            // Only schedule until the lookahead is reached\r\n            if (nextNotetime > ctxTime + lookahead) {\r\n                break;\r\n            }\r\n            // Play note\r\n            const note = this.#notesLeftToPlay.shift();\r\n            this._playNote(note, nextNotetime);\r\n        }\r\n        const current = ctxTime - this.#startTimeStamp + this.#startAt;\r\n        const endAt = (this.#endAt - this.#startAt) / this.#speed + this.#startAt;\r\n        if (this.#endAt !== -1 && current >= endAt) {\r\n            // Stop if end of time selection is reached\r\n            this.stop();\r\n        } else if (current >= this.#songDuration) {\r\n            // Stop if no notes left to play\r\n            this.stop();\r\n        } else {\r\n            // Plan next scheduler run\r\n            this.#timerID = setTimeout(this._scheduler, scheduleTimeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the player\r\n     * @param {boolean} callCallback call the callback function\r\n     * @returns {Player} itself\r\n     */\r\n    stop = (callCallback = true) => {\r\n        if (!this.#isPlaying) {\r\n            return;\r\n        }\r\n        console.log('[Player] Stopping player');\r\n        clearTimeout(this.#timerID);\r\n        this.currentPlayTime = null;\r\n        this.#isPlaying = false;\r\n        this.#isPaused = false;\r\n        this.#notes = [];\r\n        this.#notesLeftToPlay = [];\r\n        // Callback\r\n        if (this.#playerTimeCallback) {\r\n            this.#playerTimeCallback(null);\r\n        }\r\n        if (callCallback && this.#onStopCallback) {\r\n            this.#onStopCallback();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pauses the player\r\n     * @returns {Player} itself\r\n     */\r\n    pause = () => {\r\n        console.log('[Player] Pausing player');\r\n        clearTimeout(this.#timerID);\r\n        this.#isPaused = true;\r\n        // TODO: onpause callback?\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resumes the player if paused\r\n     * @returns {Player} itself\r\n     */\r\n    resume = () => {\r\n        console.log('[Player] Resuming player');\r\n        if (!this.#notesLeftToPlay || this.#notesLeftToPlay.length === 0) {\r\n            console.warn('[Player] Cannot resume player since it has not been started!');\r\n            return;\r\n        }\r\n        this.playNotes(this.#notes, this.#sound, this.currentPlayTime, this.#endAt, this.#speed);\r\n        // TODO: on resume callback?\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will either pause or resume depending on player state\r\n     * @returns {Player} itself\r\n     */\r\n    pauseOrResume = () => {\r\n        if (!this.#isPlaying) {\r\n            console.warn('[Player] Cannot pause / resume when player is not playing!');\r\n            return;\r\n        }\r\n        if (this.#isPaused) {\r\n            this.resume();\r\n        } else {\r\n            this.pause();\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","import React from 'react';\nimport View from '../lib/ui/View';\nimport { Lamellophone, Utils, NoteArray } from 'musicvis-lib';\nimport '../style/KalimbaTab.css';\nimport KalimbaRoll from './KalimbaRoll';\nimport Player from '../lib/Player';\nimport MidiParser from 'midi-parser-js';\nimport { preprocessMidiFileData } from 'musicvis-lib';\n\nexport default class KalimbaTab extends View {\n\n    constructor(props) {\n        const margin = { top: 35, right: 20, bottom: 40, left: 55 };\n        super(props, margin);\n        this.state = {\n            ...this.state,\n            input: {\n                midi: false,\n                track: 0,\n                transpose: 0,\n                midiFileData: [],\n                textInput: ''\n            },\n            output: {\n                useHtml: true,\n                letter: true,\n            },\n            notes: [],\n            playerSpeed: 1,\n            currentPlayerTime: 0\n        };\n        this.tuning = Lamellophone.lamellophoneTunings.get('Kalimba').get('17 C Major');\n        this.numberLetterMap = new Map([\n            [1, 'C'],\n            [2, 'D'],\n            [3, 'E'],\n            [4, 'F'],\n            [5, 'G'],\n            [6, 'A'],\n            [7, 'B'],\n        ]);\n        this.mounted = false;\n        // Player\n        this.player = new Player()\n            .onTimeChange(time => this.setState({ currentPlayerTime: time }))\n            .setVolume(3);\n        this.example = `A B C a b c abc\n\n1 2 3\n\nC° C' C*\n\n(C E G)\n\n(C° E G)`;\n    }\n\n    componentDidMount() {\n        // Look for notes in the URL\n        const sharedNotes = this.parseShareUrl();\n        if (sharedNotes && sharedNotes.length) {\n            console.log(sharedNotes);\n            this.setState({ notes: sharedNotes })\n        }\n        const source = document.getElementById('filereader');\n        MidiParser.parse(source, (obj) => {\n            try {\n                const parsed = preprocessMidiFileData(obj);\n                const parts = parsed.parts.map(d => d.noteObjs);\n                this.setState({\n                    input: {\n                        ...this.state.input,\n                        midiFileData: parts\n                    }\n                });\n            } catch (e) {\n                alert('Invalid MIDI file or wrong format!');\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.input !== prevState.input) {\n            const notes = this.getNotes();\n            this.setState({ notes });\n        }\n    }\n\n    showExample = () => {\n        this.textArea.value = this.example;\n        this.setState({\n            input: {\n                ...this.state.input,\n                textInput: this.example\n            }\n        });\n    }\n\n\n    getNotes = () => {\n        const { input } = this.state;\n        const { midi, midiFileData, track, transpose, textInput } = input;\n        let notes = [];\n        if (midi) {\n            if (midiFileData.length - 1 >= track) {\n                notes = midiFileData[track];\n                if (transpose !== 0) {\n                    notes = new NoteArray(notes).transpose(transpose).getNotes();\n                }\n            }\n        } else {\n            const letterFormat = Lamellophone.convertNumbersToLetters(textInput, this.numberLetterMap);\n            notes = Lamellophone.convertTabToNotes(letterFormat, this.tuning, 120);\n        }\n        return notes;\n    }\n\n    updateTab = () => {\n        const { output, notes } = this.state;\n        const { useHtml, letter } = output;\n        if (!this.tab) { return; }\n        if (useHtml) {\n            this.tab.innerHTML = Lamellophone.convertNotesToHtmlTab(\n                notes,\n                this.tuning,\n                letter ? 'letter' : 'number',\n                0.1,\n                Utils.noteColorFromPitch\n            );\n        } else {\n            this.tab.innerText = Lamellophone.convertNotesToTab(\n                notes,\n                this.tuning,\n                letter ? 'letter' : 'number',\n                0.1\n            );\n        }\n    }\n\n    /**\n     * @todo broken for some cases\n     */\n    parseShareUrl = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const param = urlParams.get('notes');\n        if (!param) {\n            return [];\n        }\n        let parsed;\n        try {\n            parsed = JSON.parse(param);\n            if (!parsed) {\n                return [];\n            }\n        } catch (e) {\n            console.warn(e);\n            console.log(param);\n            return [];\n        }\n        return new NoteArray(parsed).getNotes();\n    }\n\n    copyShareUrl = () => {\n        const { notes } = this.state;\n        const uri = encodeURI(JSON.stringify(notes));\n        const location = window.location.href.split('?')[0];\n        const url = `${location}?notes=${uri}`;\n        navigator.clipboard.writeText(url)\n            .then(() => {\n                alert('Text copied to clipboard');\n            })\n            .catch(err => {\n                alert('Error in copying text: ', err);\n            });\n    }\n\n    play = () => {\n        const { playerSpeed, notes } = this.state;\n        this.player.playNotes(notes, 'kalimba', 0, undefined, playerSpeed);\n    }\n    pauseOrResume = () => {\n        this.player.pauseOrResume();\n    }\n    stop = () => {\n        this.player.stop();\n    }\n\n\n    render() {\n        const { input, output, notes } = this.state;\n        const { midi, midiFileData, transpose } = input;\n        const { useHtml, letter } = output;\n        if (this.mounted) {\n            this.updateTab();\n        } else {\n            this.mounted = true;\n        }\n\n        // HTML\n        return (\n            <div className='View KalimbaTab'>\n                <div className='control'>\n                    <div>\n                        <label>\n                            Input:\n                            <button onClick={() => this.setState({ notes: [], input: { ...input, midi: !midi } })}>\n                                {midi ? 'MIDI' : 'Text'}\n                            </button>\n                        </label>\n                        {!midi &&\n                            <label>\n                                <button onClick={this.showExample}>\n                                    Show example\n                                </button>\n                            </label>\n                        }\n                        <div\n                            style={{ display: midi ? 'block' : 'none' }}\n                        >\n                            <label>\n                                Open a MIDI file\n                                    <input\n                                    className='fileInput'\n                                    type='file'\n                                    id='filereader'\n                                    accept='.midi,.mid'\n                                    style={{ display: midi ? 'inline-block' : 'none' }}\n                                />\n                            </label>\n                            <label>\n                                Track:\n                                    <select\n                                    onChange={e => this.setState({\n                                        input: { ...input, track: +e.target.value }\n                                    })}\n                                    disabled={midiFileData.length === 0}\n                                >\n                                    {midiFileData.map((d, i) => (\n                                        <option\n                                            key={i}\n                                            value={i}\n                                        >\n                                            Track {i} ({d.length} notes)\n                                        </option>\n                                    ))}\n                                </select>\n                            </label>\n                            <label>\n                                Transpose:\n                                    <input\n                                    type='number'\n                                    defaultValue={transpose}\n                                    min='-127'\n                                    max='127'\n                                    step='1'\n                                    onChange={e => this.setState({\n                                        input: { ...input, transpose: +e.target.value }\n                                    })}\n                                    disabled={midiFileData.length === 0}\n                                />\n                            </label>\n                        </div>\n                        <textarea\n                            ref={n => this.textArea = n}\n                            style={{ display: midi ? 'none' : 'block' }}\n                            placeholder='Write or paste a kalimba tab in letter or number notation here'\n                            onChange={e => this.setState({\n                                input: { ...input, textInput: e.target.value }\n                            })}\n                        />\n                    </div>\n                    <div>\n                        <label>\n                            Output:\n                            <button onClick={() => this.setState({\n                            output: { ...output, useHtml: !useHtml }\n                        })}>\n                                {useHtml ? 'Fancy' : 'Text'}\n                            </button>\n                        </label>\n                        <label>\n                            Note symbols:\n                            <button onClick={() => this.setState({\n                            output: { ...output, letter: !letter }\n                        })}>\n                                {letter ? 'Letter' : 'Number'}\n                            </button>\n                        </label>\n                    </div>\n                    <div>\n                        Player:\n                        <button onClick={this.play}>play</button>\n                        <button onClick={this.pauseOrResume}>pause</button>\n                        <button onClick={this.stop}>stop</button>\n                        <input\n                            type='number'\n                            min='0.1'\n                            max='2'\n                            defaultValue='1'\n                            step='0.1'\n                            onChange={e => this.setState({ playerSpeed: +e.target.value })}\n                        />\n                    </div>\n                    <div>\n                        <button onClick={this.copyShareUrl}>\n                            Copy share URL\n                        </button>\n                    </div>\n                </div>\n                <div\n                    className='tab'\n                    ref={n => this.tab = n}\n                />\n                <KalimbaRoll\n                    name='Kalimba Roll'\n                    viewSize={{\n                        outerWidth: this.props.viewSize.outerWidth - 60,\n                        outerHeight: 800\n                    }}\n                    tuning={this.tuning}\n                    data={notes}\n                    currentPlayerTime={this.state.currentPlayerTime}\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './style/App.css';\nimport KalimbaTab from './components/KalimbaTab';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewSize: {\n        outerWidth: 800,\n        outerHeight: 600\n      },\n      midiFileData: [],\n      timeSelection: null\n    };\n  }\n\n  componentDidMount() {\n    // Scale layout to current screen size\n    window.addEventListener('resize', this.onResize, false);\n    this.onResize();\n  }\n\n  /**\n   * Updates the size state when the window size changes\n   * so views can react and redraw\n   */\n  onResize = () => {\n    this.setState({\n      viewSize: {\n        outerWidth: Math.floor(window.innerWidth - 20),\n        outerHeight: Math.floor(window.innerHeight - 200)\n      }\n    });\n  }\n\n  render() {\n    const s = this.state;\n    return (\n      <div className={`App dark`} >\n        <KalimbaTab\n          viewSize={s.viewSize}\n        />\n        <div className='githubLink'>\n          <a\n            href='https://github.com/fheyen/kalimba'\n            target='blank'\n          >\n            <FontAwesomeIcon icon={faGithub} />&nbsp;\n              https://github.com/fheyen/kalimba\n          </a>\n        </div>\n      </div >\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}